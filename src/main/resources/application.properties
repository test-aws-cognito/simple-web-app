################################################################################
# Application input parameters
################################################################################
application.hostname=localhost
application.port=12345

# Not necessary hostname:port. When in docker or using loadbalancer redirect must be external!
# Also make sure protocol is correct! Cogito requires HTTPS! (And above dev you should as well ;)
application.cognito.redirect-uri=https://${application.hostname}:${application.port}/login/oauth2/code/cognito
application.cognito.client-id=<cognito client id>
application.cognito.client-secret=<cognito client secret>
application.cognito.aws-region=<cognito aws region>
application.cognito.user-pool-id=<cognito user pool id>

application.redis.hostname=localhost
application.redis.port=6379


################################################################################
# Application static configuration
# If possible configure only basic configuration fields
################################################################################
# General
server.port=${application.port}

# SSL
server.ssl.key-store-type=PKCS12
server.ssl.key-store=classpath:keystore.p12
server.ssl.key-store-password=password
server.ssl.key-alias=tomcat
security.require-ssl=true

# Cognito
spring.security.oauth2.client.registration.cognito.provider=cognito
spring.security.oauth2.client.registration.cognito.client-id=${application.cognito.client-id}
spring.security.oauth2.client.registration.cognito.client-secret=${application.cognito.client-secret}
spring.security.oauth2.client.registration.cognito.redirect-uri=${application.cognito.redirect-uri}
spring.security.oauth2.client.registration.cognito.scope=openid

spring.security.oauth2.client.provider.cognito.issuer-uri=https://cognito-idp.${application.cognito.aws-region}.amazonaws.com/${application.cognito.user-pool-id}
spring.security.oauth2.client.provider.cognito.user-name-attribute=cognito:username

# Redis session management
spring.session.store-type=redis
server.servlet.session.timeout=3600s
spring.session.redis.flush-mode=on_save
spring.session.redis.namespace=spring:session

spring.redis.host=${application.redis.hostname}
#spring.redis.password=
spring.redis.port=${application.redis.port}
